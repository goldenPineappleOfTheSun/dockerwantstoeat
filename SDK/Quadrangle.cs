//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.smartid {

public class Quadrangle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.SafeHandle swigCPtr;
  protected bool swigCMemOwn;

  internal Quadrangle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(cPtr, false);
  }

  internal static global::System.Runtime.InteropServices.SafeHandle getCPtr(Quadrangle obj) {
    return (obj == null) ? new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(global::System.IntPtr.Zero, false) : obj.swigCPtr;
  }

  ~Quadrangle() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr != null && swigCPtr.DangerousGetHandle() != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csSmartIdEnginePINVOKE.delete_Quadrangle(swigCPtr.DangerousGetHandle());
        }
        swigCPtr = new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(global::System.IntPtr.Zero, false);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Quadrangle() : this(csSmartIdEnginePINVOKE.new_Quadrangle__SWIG_0(), true) {
  }

  public Quadrangle(Point a, Point b, Point c, Point d) : this(csSmartIdEnginePINVOKE.new_Quadrangle__SWIG_1(Point.getCPtr(a).DangerousGetHandle(), Point.getCPtr(b).DangerousGetHandle(), Point.getCPtr(c).DangerousGetHandle(), Point.getCPtr(d).DangerousGetHandle()), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Point GetPoint(int index) {
    Point ret = new Point(csSmartIdEnginePINVOKE.Quadrangle_GetPoint(swigCPtr.DangerousGetHandle(), index), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPoint(int index, Point value) {
    csSmartIdEnginePINVOKE.Quadrangle_SetPoint(swigCPtr.DangerousGetHandle(), index, Point.getCPtr(value).DangerousGetHandle());
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Rectangle GetBoundingRectangle() {
    Rectangle ret = new Rectangle(csSmartIdEnginePINVOKE.Quadrangle_GetBoundingRectangle(swigCPtr.DangerousGetHandle()), true);
    return ret;
  }

}

}

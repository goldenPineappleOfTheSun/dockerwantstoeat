//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.smartid {

public class ProcessorEngine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.SafeHandle swigCPtr;
  protected bool swigCMemOwn;

  internal ProcessorEngine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(cPtr, false);
  }

  internal static global::System.Runtime.InteropServices.SafeHandle getCPtr(ProcessorEngine obj) {
    return (obj == null) ? new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(global::System.IntPtr.Zero, false) : obj.swigCPtr;
  }

  ~ProcessorEngine() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr != null && swigCPtr.DangerousGetHandle() != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csSmartIdEnginePINVOKE.delete_ProcessorEngine(swigCPtr.DangerousGetHandle());
        }
        swigCPtr = new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(global::System.IntPtr.Zero, false);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ProcessorEngine(string config_path, bool lazy_configuration) : this(csSmartIdEnginePINVOKE.new_ProcessorEngine__SWIG_0(config_path, lazy_configuration), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcessorEngine(string config_path) : this(csSmartIdEnginePINVOKE.new_ProcessorEngine__SWIG_1(config_path), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcessorEngine(byte[] config_data, uint data_length, bool lazy_configuration) : this(csSmartIdEnginePINVOKE.new_ProcessorEngine__SWIG_2(config_data, data_length, lazy_configuration), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public ProcessorEngine(byte[] config_data, uint data_length) : this(csSmartIdEnginePINVOKE.new_ProcessorEngine__SWIG_3(config_data, data_length), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetProcessorsNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.ProcessorEngine_GetProcessorsNames(swigCPtr.DangerousGetHandle()), true);
    return ret;
  }

  public bool HasProcessor(string name) {
    bool ret = csSmartIdEnginePINVOKE.ProcessorEngine_HasProcessor(swigCPtr.DangerousGetHandle(), name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringFieldCollection ProcessFields(string processor_name, StringFieldCollection string_fields) {
    StringFieldCollection ret = new StringFieldCollection(csSmartIdEnginePINVOKE.ProcessorEngine_ProcessFields(swigCPtr.DangerousGetHandle(), processor_name, StringFieldCollection.getCPtr(string_fields).DangerousGetHandle()), true);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetVersion() {
    string ret = csSmartIdEnginePINVOKE.ProcessorEngine_GetVersion();
    return ret;
  }

  public static StringVector GetKeys(StringFieldCollection string_fields) {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.ProcessorEngine_GetKeys(StringFieldCollection.getCPtr(string_fields).DangerousGetHandle()), true);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

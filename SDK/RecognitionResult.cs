//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.smartid {

public class RecognitionResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.SafeHandle swigCPtr;
  protected bool swigCMemOwn;

  internal RecognitionResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(cPtr, false);
  }

  internal static global::System.Runtime.InteropServices.SafeHandle getCPtr(RecognitionResult obj) {
    return (obj == null) ? new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(global::System.IntPtr.Zero, false) : obj.swigCPtr;
  }

  ~RecognitionResult() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr != null && swigCPtr.DangerousGetHandle() != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csSmartIdEnginePINVOKE.delete_RecognitionResult(swigCPtr.DangerousGetHandle());
        }
        swigCPtr = new global::Microsoft.Win32.SafeHandles.SafeWaitHandle(global::System.IntPtr.Zero, false);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public RecognitionResult() : this(csSmartIdEnginePINVOKE.new_RecognitionResult__SWIG_0(), true) {
  }

  public RecognitionResult(StringFieldCollection string_fields, ImageFieldCollection image_fields, ForensicFieldCollection forensic_fields, StringFieldCollection raw_string_fields, ImageFieldCollection raw_image_fields, string document_type, MatchResultVector match_results, SegmentationResultVector segmentation_results, bool is_terminal) : this(csSmartIdEnginePINVOKE.new_RecognitionResult__SWIG_1(StringFieldCollection.getCPtr(string_fields).DangerousGetHandle(), ImageFieldCollection.getCPtr(image_fields).DangerousGetHandle(), ForensicFieldCollection.getCPtr(forensic_fields).DangerousGetHandle(), StringFieldCollection.getCPtr(raw_string_fields).DangerousGetHandle(), ImageFieldCollection.getCPtr(raw_image_fields).DangerousGetHandle(), document_type, MatchResultVector.getCPtr(match_results).DangerousGetHandle(), SegmentationResultVector.getCPtr(segmentation_results).DangerousGetHandle(), is_terminal), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetStringFieldNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.RecognitionResult_GetStringFieldNames(swigCPtr.DangerousGetHandle()), true);
    return ret;
  }

  public bool HasStringField(string name) {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_HasStringField(swigCPtr.DangerousGetHandle(), name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringField GetStringField(string name) {
    StringField ret = new StringField(csSmartIdEnginePINVOKE.RecognitionResult_GetStringField(swigCPtr.DangerousGetHandle(), name), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringFieldCollection GetStringFields() {
    StringFieldCollection ret = new StringFieldCollection(csSmartIdEnginePINVOKE.RecognitionResult_GetStringFields__SWIG_0(swigCPtr.DangerousGetHandle()), false);
    return ret;
  }

  public void SetStringFields(StringFieldCollection string_fields) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetStringFields(swigCPtr.DangerousGetHandle(), StringFieldCollection.getCPtr(string_fields).DangerousGetHandle());
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetImageFieldNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.RecognitionResult_GetImageFieldNames(swigCPtr.DangerousGetHandle()), true);
    return ret;
  }

  public bool HasImageField(string name) {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_HasImageField(swigCPtr.DangerousGetHandle(), name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ImageField GetImageField(string name) {
    ImageField ret = new ImageField(csSmartIdEnginePINVOKE.RecognitionResult_GetImageField(swigCPtr.DangerousGetHandle(), name), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ImageFieldCollection GetImageFields() {
    ImageFieldCollection ret = new ImageFieldCollection(csSmartIdEnginePINVOKE.RecognitionResult_GetImageFields__SWIG_0(swigCPtr.DangerousGetHandle()), false);
    return ret;
  }

  public void SetImageFields(ImageFieldCollection image_fields) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetImageFields(swigCPtr.DangerousGetHandle(), ImageFieldCollection.getCPtr(image_fields).DangerousGetHandle());
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetForensicFieldNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.RecognitionResult_GetForensicFieldNames(swigCPtr.DangerousGetHandle()), true);
    return ret;
  }

  public bool HasForensicField(string name) {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_HasForensicField(swigCPtr.DangerousGetHandle(), name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ForensicField GetForensicField(string name) {
    ForensicField ret = new ForensicField(csSmartIdEnginePINVOKE.RecognitionResult_GetForensicField(swigCPtr.DangerousGetHandle(), name), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ForensicFieldCollection GetForensicFields() {
    ForensicFieldCollection ret = new ForensicFieldCollection(csSmartIdEnginePINVOKE.RecognitionResult_GetForensicFields__SWIG_0(swigCPtr.DangerousGetHandle()), false);
    return ret;
  }

  public void SetForensicFields(ForensicFieldCollection forensic_fields) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetForensicFields(swigCPtr.DangerousGetHandle(), ForensicFieldCollection.getCPtr(forensic_fields).DangerousGetHandle());
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetRawStringFieldNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.RecognitionResult_GetRawStringFieldNames(swigCPtr.DangerousGetHandle()), true);
    return ret;
  }

  public bool HasRawStringField(string name) {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_HasRawStringField(swigCPtr.DangerousGetHandle(), name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringField GetRawStringField(string name) {
    StringField ret = new StringField(csSmartIdEnginePINVOKE.RecognitionResult_GetRawStringField(swigCPtr.DangerousGetHandle(), name), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringFieldCollection GetRawStringFields() {
    StringFieldCollection ret = new StringFieldCollection(csSmartIdEnginePINVOKE.RecognitionResult_GetRawStringFields__SWIG_0(swigCPtr.DangerousGetHandle()), false);
    return ret;
  }

  public void SetRawStringFields(StringFieldCollection raw_string_fields) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetRawStringFields(swigCPtr.DangerousGetHandle(), StringFieldCollection.getCPtr(raw_string_fields).DangerousGetHandle());
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetRawImageFieldNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.RecognitionResult_GetRawImageFieldNames(swigCPtr.DangerousGetHandle()), true);
    return ret;
  }

  public bool HasRawImageField(string name) {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_HasRawImageField(swigCPtr.DangerousGetHandle(), name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ImageField GetRawImageField(string name) {
    ImageField ret = new ImageField(csSmartIdEnginePINVOKE.RecognitionResult_GetRawImageField(swigCPtr.DangerousGetHandle(), name), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ImageFieldCollection GetRawImageFields() {
    ImageFieldCollection ret = new ImageFieldCollection(csSmartIdEnginePINVOKE.RecognitionResult_GetRawImageFields__SWIG_0(swigCPtr.DangerousGetHandle()), false);
    return ret;
  }

  public void SetRawImageFields(ImageFieldCollection raw_image_fields) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetRawImageFields(swigCPtr.DangerousGetHandle(), ImageFieldCollection.getCPtr(raw_image_fields).DangerousGetHandle());
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetDocumentType() {
    string ret = csSmartIdEnginePINVOKE.RecognitionResult_GetDocumentType(swigCPtr.DangerousGetHandle());
    return ret;
  }

  public void SetDocumentType(string doctype) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetDocumentType(swigCPtr.DangerousGetHandle(), doctype);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MatchResultVector GetMatchResults() {
    MatchResultVector ret = new MatchResultVector(csSmartIdEnginePINVOKE.RecognitionResult_GetMatchResults(swigCPtr.DangerousGetHandle()), false);
    return ret;
  }

  public void SetMatchResults(MatchResultVector match_results) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetMatchResults(swigCPtr.DangerousGetHandle(), MatchResultVector.getCPtr(match_results).DangerousGetHandle());
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SegmentationResultVector GetSegmentationResults() {
    SegmentationResultVector ret = new SegmentationResultVector(csSmartIdEnginePINVOKE.RecognitionResult_GetSegmentationResults(swigCPtr.DangerousGetHandle()), false);
    return ret;
  }

  public void SetSegmentationResults(SegmentationResultVector segmentation_results) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetSegmentationResults(swigCPtr.DangerousGetHandle(), SegmentationResultVector.getCPtr(segmentation_results).DangerousGetHandle());
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsTerminal() {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_IsTerminal(swigCPtr.DangerousGetHandle());
    return ret;
  }

  public void SetIsTerminal(bool is_terminal) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetIsTerminal(swigCPtr.DangerousGetHandle(), is_terminal);
  }

  public string GetJpegCompression() {
    string ret = csSmartIdEnginePINVOKE.RecognitionResult_GetJpegCompression(swigCPtr.DangerousGetHandle());
    return ret;
  }

  public void SetJpegCompression(string jpeg_compression) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetJpegCompression(swigCPtr.DangerousGetHandle(), jpeg_compression);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
